{
  "name": "TokenMigrator",
  "source": "\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n\n// File: contracts/5_tokenMigration.sol\n\n\npragma solidity 0.8.16;\n\n\n\n/**\n * @title TokenMigrator\n * @notice This contract is used to migrate an ERC20 token from one\n * contract to another.\n * This contract holds the total amount of new token that can be migrated.\n * To migrate, tokens holder must approve for this contract their total balance of the legacy token.\n * The balance from the legacy token will be transfered from the user to the migrator, as it\n * is migrated (remaining there forever), and the exact amount of new tokens will be sent to the holder.\n */\ncontract TokenMigrator {\n    using SafeERC20 for IERC20;\n\n    error InsufficientLegacyTokenBalance();\n\n    IERC20 public immutable legacyToken;\n    IERC20 public immutable newToken;\n    uint256 public _totalMigrated;\n\n    /**\n     * @notice emitted on migration\n     * @param sender_ the caller of the migration\n     * @param amount_ the amount being migrated\n     */\n    event TokenMigrated(address indexed sender_, address indexed user_, uint256 amount_);\n\n    /**\n     * @param legacyToken_ the address of the legacy token\n     * @param newToken_ the address of the new token\n     */\n    constructor(IERC20 legacyToken_, IERC20 newToken_) {\n        legacyToken = legacyToken_;\n        newToken = newToken_;\n    }\n\n    /**\n     * @notice executes the migration from legacy token to new token for `user_`.\n     * `user_` must give legacy token allowance to this contract to transfer legacy token before\n     *  executing this transaction.\n     * The migration ratio is 1:1\n     * @param user_ address who migrates the tokens\n     */\n    function _migrateToken(address user_) internal {\n        uint256 amount = legacyToken.balanceOf(user_);\n        if (amount == 0) revert InsufficientLegacyTokenBalance();\n        _totalMigrated += amount;\n        legacyToken.safeTransferFrom(user_, address(this), amount);\n        newToken.safeTransfer(user_, amount);\n        emit TokenMigrated(msg.sender, user_, amount);\n    }\n\n    /**\n     * @notice executes the migration from legacyt oken to newToken for function caller.\n     * Caller must give legacyt oken allowance to this contract to transfer legacyt oken before\n     * executing this transaction.\n     * The migration ratio is 1:1\n     */\n    function migrateToken() external {\n        _migrateToken(msg.sender);\n    }\n\n    /**\n     * @notice executes the migration from legacy token to new token for `user_`.\n     * `user_` must give legacy token allowance to this contract to transfer legacy token before\n     * executing this transaction.\n     * The migration ratio is 1:1\n     * @param user_ address who migrates the tokens\n     */\n    function migrateTokenFrom(address user_) external {\n        _migrateToken(user_);\n    }\n}",
  "imports": [
  ],
  "version": "0.8.16+commit.07a7930e",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london"
  },
  "address": "0xabb96fc7d16bbbae444e913cc6729694a4a4d69f",
  "bytecode": "60c060405234801561001057600080fd5b506040516107a03803806107a083398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a0516106d36100cd6000396000818160bc015261021d01526000818160610152818161013401526101e801526106d36000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063131554551461005c57806357bdecd0146100a0578063c42bd05a146100b7578063d5482804146100de578063e177f044146100e8575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a960005481565b604051908152602001610097565b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6100e66100fb565b005b6100e66100f6366004610598565b610106565b61010433610112565b565b61010f81610112565b50565b6040516370a0823160e01b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa15801561017d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a191906105c8565b9050806000036101c45760405163855fdf3f60e01b815260040160405180910390fd5b806000808282546101d591906105e1565b9091555061021090506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016833084610288565b6102446001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001683836102f9565b6040518181526001600160a01b0383169033907f39a54d7a71ca31798e3d96be34be0322c214765144b2b52e142d763c6c7b86b49060200160405180910390a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526102f39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261032e565b50505050565b6040516001600160a01b03831660248201526044810182905261032990849063a9059cbb60e01b906064016102bc565b505050565b6000610383826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166104089092919063ffffffff16565b90508051600014806103a45750808060200190518101906103a49190610608565b6103295760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6060610417848460008561041f565b949350505050565b6060824710156104805760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103ff565b600080866001600160a01b0316858760405161049c919061064e565b60006040518083038185875af1925050503d80600081146104d9576040519150601f19603f3d011682016040523d82523d6000602084013e6104de565b606091505b50915091506104ef878383876104fa565b979650505050505050565b60608315610569578251600003610562576001600160a01b0385163b6105625760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ff565b5081610417565b610417838381511561057e5781518083602001fd5b8060405162461bcd60e51b81526004016103ff919061066a565b6000602082840312156105aa57600080fd5b81356001600160a01b03811681146105c157600080fd5b9392505050565b6000602082840312156105da57600080fd5b5051919050565b8082018082111561060257634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561061a57600080fd5b815180151581146105c157600080fd5b60005b8381101561064557818101518382015260200161062d565b50506000910152565b6000825161066081846020870161062a565b9190910192915050565b602081526000825180602084015261068981604085016020870161062a565b601f01601f1916919091016040019291505056fea264697066735822122031599d37ecbd361946999a3931f9b29a6c13bf32923ec8041a6f8b68dffc94dc64736f6c63430008100033",
  "deployedBytecode" : "0x6080604052600436106101c25760003560e01c806352d1902d116100f75780639dc29fac11610095578063ca15c87311610064578063ca15c8731461050c578063d547741f1461052c578063dd62ed3e1461054c578063e4c0aaf41461056c57600080fd5b80639dc29fac14610497578063a217fddf146104b7578063a457c2d7146104cc578063a9059cbb146104ec57600080fd5b80638f15b414116100d15780638f15b414146104225780639010d07c1461044257806391d148541461046257806395d89b411461048257600080fd5b806352d1902d146103b757806370a08231146103cc57806383d2230d1461040257600080fd5b80632f2ff15d116101645780633659cfe61161013e5780633659cfe614610344578063395093511461036457806340c10f19146103845780634f1ef286146103a457600080fd5b80632f2ff15d146102e6578063313ce5671461030857806336568abe1461032457600080fd5b80630c340a24116101a05780630c340a241461023e57806318160ddd1461027757806323b872dd14610296578063248a9ca3146102b657600080fd5b806301ffc9a7146101c757806306fdde03146101fc578063095ea7b31461021e575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611df7565b61058c565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b506102116105b7565b6040516101f39190611e45565b34801561022a57600080fd5b506101e7610239366004611e8d565b610649565b34801561024a57600080fd5b5061015f5461025f906001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b34801561028357600080fd5b5060cb545b6040519081526020016101f3565b3480156102a257600080fd5b506101e76102b1366004611eb9565b610661565b3480156102c257600080fd5b506102886102d1366004611efa565b60009081526065602052604090206001015490565b3480156102f257600080fd5b50610306610301366004611f13565b610687565b005b34801561031457600080fd5b50604051601281526020016101f3565b34801561033057600080fd5b5061030661033f366004611f13565b6106b1565b34801561035057600080fd5b5061030661035f366004611f43565b610734565b34801561037057600080fd5b506101e761037f366004611e8d565b610813565b34801561039057600080fd5b506101e761039f366004611e8d565b610835565b6103066103b2366004611fec565b610859565b3480156103c357600080fd5b50610288610925565b3480156103d857600080fd5b506102886103e7366004611f43565b6001600160a01b0316600090815260c9602052604090205490565b34801561040e57600080fd5b5061030661041d366004611f43565b6109d8565b34801561042e57600080fd5b5061030661043d366004612070565b610b3d565b34801561044e57600080fd5b5061025f61045d3660046120f9565b610c86565b34801561046e57600080fd5b506101e761047d366004611f13565b610c9e565b34801561048e57600080fd5b50610211610cc9565b3480156104a357600080fd5b506103066104b2366004611e8d565b610cd8565b3480156104c357600080fd5b50610288600081565b3480156104d857600080fd5b506101e76104e7366004611e8d565b610cfa565b3480156104f857600080fd5b506101e7610507366004611e8d565b610d80565b34801561051857600080fd5b50610288610527366004611efa565b610d8e565b34801561053857600080fd5b50610306610547366004611f13565b610da5565b34801561055857600080fd5b5061028861056736600461211b565b610dca565b34801561057857600080fd5b50610306610587366004611f43565b610df5565b60006001600160e01b03198216635a05180f60e01b14806105b157506105b182610e20565b92915050565b606060cc80546105c690612149565b80601f01602080910402602001604051908101604052809291908181526020018280546105f290612149565b801561063f5780601f106106145761010080835404028352916020019161063f565b820191906000526020600020905b81548152906001019060200180831161062257829003601f168201915b5050505050905090565b600033610657818585610e55565b5060019392505050565b60003361066f858285610f79565b61067a858585610ff3565b60019150505b9392505050565b6000828152606560205260409020600101546106a28161119e565b6106ac83836111a8565b505050565b6001600160a01b03811633146107265760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61073082826111ca565b5050565b6001600160a01b037f000000000000000000000000abb96fc7d16bbbae444e913cc6729694a4a4d69f16300361077c5760405162461bcd60e51b815260040161071d90612183565b7f000000000000000000000000abb96fc7d16bbbae444e913cc6729694a4a4d69f6001600160a01b03166107c56000805160206124ff833981519152546001600160a01b031690565b6001600160a01b0316146107eb5760405162461bcd60e51b815260040161071d906121cf565b6107f4816111ec565b60408051600080825260208201909252610810918391906111f4565b50565b6000336106578185856108268383610dca565b6108309190612231565b610e55565b600060008051602061254683398151915261084f8161119e565b610657848461135f565b6001600160a01b037f000000000000000000000000abb96fc7d16bbbae444e913cc6729694a4a4d69f1630036108a15760405162461bcd60e51b815260040161071d90612183565b7f000000000000000000000000abb96fc7d16bbbae444e913cc6729694a4a4d69f6001600160a01b03166108ea6000805160206124ff833981519152546001600160a01b031690565b6001600160a01b0316146109105760405162461bcd60e51b815260040161071d906121cf565b610919826111ec565b610730828260016111f4565b6000306001600160a01b037f000000000000000000000000abb96fc7d16bbbae444e913cc6729694a4a4d69f16146109c55760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161071d565b506000805160206124ff83398151915290565b6000805260656020527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1c54610a0c8161119e565b610a176000836111a8565b610a2f600080516020612546833981519152836111a8565b610a476000805160206124df833981519152836111a8565b610a5f600080516020612546833981519152336111ca565b610a776000805160206124df833981519152336111ca565b610a826000336111ca565b610a8c6000610d8e565b600114610aaf57604051630e2b37cd60e41b81526000600482015260240161071d565b610ac6600080516020612546833981519152610d8e565b600114610af657604051630e2b37cd60e41b8152600080516020612546833981519152600482015260240161071d565b610b0d6000805160206124df833981519152610d8e565b60011461073057604051630e2b37cd60e41b81526000805160206124df833981519152600482015260240161071d565b600054610100900460ff1615808015610b5d5750600054600160ff909116105b80610b775750303b158015610b77575060005460ff166001145b610bda5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161071d565b6000805460ff191660011790558015610bfd576000805461ff0019166101001790555b610c0985858585611420565b610c21600080516020612546833981519152846111a8565b610c396000805160206124df833981519152846111a8565b8015610c7f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60008281526097602052604081206106809083611475565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060cd80546105c690612149565b6000805160206124df833981519152610cf08161119e565b6106ac8383611481565b60003381610d088286610dca565b905083811015610d685760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161071d565b610d758286868403610e55565b506001949350505050565b600033610657818585610ff3565b60008181526097602052604081206105b1906115b5565b600082815260656020526040902060010154610dc08161119e565b6106ac83836111ca565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b610dfd6115bf565b61015f80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b14806105b157506301ffc9a760e01b6001600160e01b03198316146105b1565b6001600160a01b038316610eb75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161071d565b6001600160a01b038216610f185760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161071d565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610f858484610dca565b90506000198114610fed5781811015610fe05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161071d565b610fed8484848403610e55565b50505050565b6001600160a01b0383166110575760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161071d565b6001600160a01b0382166110b95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161071d565b6001600160a01b038316600090815260c96020526040902054818110156111315760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161071d565b6001600160a01b03808516600081815260c9602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906111919086815260200190565b60405180910390a3610fed565b610810813361164b565b6111b282826116a4565b60008281526097602052604090206106ac908261172a565b6111d4828261173f565b60008281526097602052604090206106ac90826117a6565b6108106115bf565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611227576106ac836117bb565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611281575060408051601f3d908101601f1916820190925261127e91810190612244565b60015b6112e45760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161071d565b6000805160206124ff83398151915281146113535760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161071d565b506106ac838383611857565b6001600160a01b0382166113b55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161071d565b8060cb60008282546113c79190612231565b90915550506001600160a01b038216600081815260c960209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600054610100900460ff166114475760405162461bcd60e51b815260040161071d9061225d565b611451848461187c565b6114596118ad565b6114616118ad565b61146a816118d4565b610fed6000836111a8565b60006106808383611904565b6001600160a01b0382166114e15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161071d565b6001600160a01b038216600090815260c96020526040902054818110156115555760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161071d565b6001600160a01b038316600081815260c960209081526040808320868603905560cb80548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b60006105b1825490565b61015f5460405163d994d6d560e01b81523360048201526001600160a01b039091169063d994d6d590602401602060405180830381865afa158015611608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162c91906122a8565b61164957604051631dd1b1b560e21b815260040160405180910390fd5b565b6116558282610c9e565b610730576116628161192e565b61166d836020611940565b60405160200161167e9291906122ca565b60408051601f198184030181529082905262461bcd60e51b825261071d91600401611e45565b6116ae8282610c9e565b6107305760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116e63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610680836001600160a01b038416611adc565b6117498282610c9e565b156107305760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610680836001600160a01b038416611b2b565b6001600160a01b0381163b6118285760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161071d565b6000805160206124ff83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61186083611c1e565b60008251118061186d5750805b156106ac57610fed8383611c5e565b600054610100900460ff166118a35760405162461bcd60e51b815260040161071d9061225d565b6107308282611d52565b600054610100900460ff166116495760405162461bcd60e51b815260040161071d9061225d565b600054610100900460ff166118fb5760405162461bcd60e51b815260040161071d9061225d565b61081081611d92565b600082600001828154811061191b5761191b61233f565b9060005260206000200154905092915050565b60606105b16001600160a01b03831660145b6060600061194f836002612355565b61195a906002612231565b67ffffffffffffffff81111561197257611972611f60565b6040519080825280601f01601f19166020018201604052801561199c576020820181803683370190505b509050600360fc1b816000815181106119b7576119b761233f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119e6576119e661233f565b60200101906001600160f81b031916908160001a9053506000611a0a846002612355565b611a15906001612231565b90505b6001811115611a8d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611a4957611a4961233f565b1a60f81b828281518110611a5f57611a5f61233f565b60200101906001600160f81b031916908160001a90535060049490941c93611a8681612374565b9050611a18565b5083156106805760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161071d565b6000818152600183016020526040812054611b23575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105b1565b5060006105b1565b60008181526001830160205260408120548015611c14576000611b4f60018361238b565b8554909150600090611b639060019061238b565b9050818114611bc8576000866000018281548110611b8357611b8361233f565b9060005260206000200154905080876000018481548110611ba657611ba661233f565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611bd957611bd961239e565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105b1565b60009150506105b1565b611c27816117bb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611cc65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161071d565b600080846001600160a01b031684604051611ce191906123b4565b600060405180830381855af49150503d8060008114611d1c576040519150601f19603f3d011682016040523d82523d6000602084013e611d21565b606091505b5091509150611d49828260405180606001604052806027815260200161251f60279139611db9565b95945050505050565b600054610100900460ff16611d795760405162461bcd60e51b815260040161071d9061225d565b60cc611d85838261241e565b5060cd6106ac828261241e565b600054610100900460ff16610dfd5760405162461bcd60e51b815260040161071d9061225d565b60608315611dc8575081610680565b6106808383815115611ddd5781518083602001fd5b8060405162461bcd60e51b815260040161071d9190611e45565b600060208284031215611e0957600080fd5b81356001600160e01b03198116811461068057600080fd5b60005b83811015611e3c578181015183820152602001611e24565b50506000910152565b6020815260008251806020840152611e64816040850160208701611e21565b601f01601f19169190910160400192915050565b6001600160a01b038116811461081057600080fd5b60008060408385031215611ea057600080fd5b8235611eab81611e78565b946020939093013593505050565b600080600060608486031215611ece57600080fd5b8335611ed981611e78565b92506020840135611ee981611e78565b929592945050506040919091013590565b600060208284031215611f0c57600080fd5b5035919050565b60008060408385031215611f2657600080fd5b823591506020830135611f3881611e78565b809150509250929050565b600060208284031215611f5557600080fd5b813561068081611e78565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611f9157611f91611f60565b604051601f8501601f19908116603f01168101908282118183101715611fb957611fb9611f60565b81604052809350858152868686011115611fd257600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215611fff57600080fd5b823561200a81611e78565b9150602083013567ffffffffffffffff81111561202657600080fd5b8301601f8101851361203757600080fd5b61204685823560208401611f76565b9150509250929050565b600082601f83011261206157600080fd5b61068083833560208501611f76565b6000806000806080858703121561208657600080fd5b843567ffffffffffffffff8082111561209e57600080fd5b6120aa88838901612050565b955060208701359150808211156120c057600080fd5b506120cd87828801612050565b93505060408501356120de81611e78565b915060608501356120ee81611e78565b939692955090935050565b6000806040838503121561210c57600080fd5b50508035926020909101359150565b6000806040838503121561212e57600080fd5b823561213981611e78565b91506020830135611f3881611e78565b600181811c9082168061215d57607f821691505b60208210810361217d57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808201808211156105b1576105b161221b565b60006020828403121561225657600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156122ba57600080fd5b8151801515811461068057600080fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612302816017850160208801611e21565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612333816028840160208801611e21565b01602801949350505050565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561236f5761236f61221b565b500290565b6000816123835761238361221b565b506000190190565b818103818111156105b1576105b161221b565b634e487b7160e01b600052603160045260246000fd5b600082516123c6818460208701611e21565b9190910192915050565b601f8211156106ac57600081815260208120601f850160051c810160208610156123f75750805b601f850160051c820191505b8181101561241657828155600101612403565b505050505050565b815167ffffffffffffffff81111561243857612438611f60565b61244c816124468454612149565b846123d0565b602080601f83116001811461248157600084156124695750858301515b600019600386901b1c1916600185901b178555612416565b600085815260208120601f198616915b828110156124b057888601518255948401946001909101908401612491565b50858210156124ce5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65649f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a264697066735822122060678780aa74c77859dbc87122cf8b2ed1a95e08d9a5422a26a246214278952564736f6c63430008100033"
}
